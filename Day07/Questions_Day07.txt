Q1) Write a code for small astrology based on your life
path number for that get date of birth from user then
calculate life path number. (use switch case)
	Example:-
		Calculation for life path number: //date is 23
			a=date%10	3
			b=date/10	2
			c=a+b	5
		if life path number:
			1:Lucky
			2:Carefuly do your work
			3:Storger
			4:Happy
			5:Can get help
			6:Doubt
			7:Sad
			8:Like
			9:Courage


[pavani@PAVANIPABASARA ~]$ vi question01.sh

echo "Enter your birth date (1-31):"
read date

if ! [[ "$date" =~ ^[0-9]+$ ]] || [ "$date" -lt 1 ] || [ "$date" -gt 31 ];
then
  echo "Invalid date. Please enter a number between 1 and 31."
  exit 1
fi

a=$((date % 10))
b=$((date / 10))
life_path=$((a + b))

while [ "$life_path" -gt 9 ]; do
  a=$((life_path % 10))
  b=$((life_path / 10))
  life_path=$((a + b))
done

echo "Your Life Path Number is: $life_path"
case $life_path in
  1) echo "Lucky" ;;
  2) echo "Carefully do your work" ;;
  3) echo "Stronger" ;;
  4) echo "Happy" ;;
  5) echo "Can get help" ;;
  6) echo "Doubt" ;;
  7) echo "Sad" ;;
  8) echo "Like" ;;
  9) echo "Courage" ;;
  *) echo "No prediction available." ;;
esac

outputs:
[pavani@PAVANIPABASARA ~]$ chmod 777 question01.sh
[pavani@PAVANIPABASARA ~]$ ./question01.sh
Enter your birth date (1-31):
14
Your Life Path Number is: 5
Can get help
[pavani@PAVANIPABASARA ~]$ ./question01.sh
Enter your birth date (1-31):
29
Your Life Path Number is: 2
Carefully do your work


Q2) Give list of numbers then calculate the 
	summation and multiplication using for loop.
	Ex:-
		1 2 3 4 5
			Summation = 15
			multiplication = 120

//syntax for FOR LOOP
for variable in list
		do
			commands
		done 



[pavani@PAVANIPABASARA ~]$ vi question02.sh
sum=0
mul=1

for number in 1 2 3 4 5
do
sum=$(($sum+$number))
mul=$(($mul*$number))
done

echo "Summation: " $sum
echo "Multiplication: " $mul


outputs:

[pavani@PAVANIPABASARA ~]$ vi question02.sh
[pavani@PAVANIPABASARA ~]$ chmod 777 question02.sh
[pavani@PAVANIPABASARA ~]$ ./question02.sh
Summation:  15
Multiplication:  120

Q3) Print the integers from 1 to 10 using while loop.

//syntax
while [ condition ] //while[variable_name -le 10]
do
	commands
done


[pavani@PAVANIPABASARA ~]$ vi question03.sh
i=1
while [ $i -le 10 ]
do
echo $i
i=$(($i+1))
done

outputs:

[pavani@PAVANIPABASARA ~]$ vi question03.sh
[pavani@PAVANIPABASARA ~]$ chmod 777 question03.sh
[pavani@PAVANIPABASARA ~]$ ./question03.sh
1
2
3
4
5
6
7
8
9
10

Q4) Print below pattern using nested loop.

//suntax for nested for loop

for ((variable=0; variable<=input;variable++))
do
	for ((variable=0; variable<=input;variable++))
	do
		commands
	done
done


columns=7	rows = 7

i)
*
* *
* * *
* * * *
* * * * *
* * * * * *
* * * * * * *

ii)
* * * * * * *
* * * * * *
* * * * * 
* * * *
* * *
* *
*

iii)
1
2 2
3 3 3
4 4 4 4
5 5 5 5 5
6 6 6 6 6 6


iv)
1
1 2 
1 2 3
1 2 3 4
1 2 3 4 5
1 2 3 4 5 6


v)
    *
   * *
  * * *
 * * * *
* * * * *

[pavani@PAVANIPABASARA ~]$ vi question04.sh
# Pattern i)
echo "Pattern i)"
for ((i=1; i<=7; i++))
do
  for ((j=1; j<=i; j++))
  do
    echo -n "* "
  done
  echo
done

# Pattern ii)
echo -e "\nPattern ii)"
for ((i=7; i>=1; i--))
do
  for ((j=1; j<=i; j++))
  do
    echo -n "* "
  done
  echo
done

# Pattern iii)
echo -e "\nPattern iii)"
for ((i=1; i<=6; i++))
do
  for ((j=1; j<=i; j++))
  do
    echo -n "$i "
  done
  echo
done

# Pattern iv)
echo -e "\nPattern iv)"
for ((i=1; i<=6; i++))
do
  for ((j=1; j<=i; j++))
  do
    echo -n "$j "
  done
  echo
done

# Pattern v)
echo -e "\nPattern v)"
rows=5
for ((i=1; i<=rows; i++))
do
  for ((j=i; j<rows; j++))
  do
    echo -n " "
  done
  for ((k=1; k<=i; k++))
  do
    echo -n "* "
  done
  echo
done

outputs:

[pavani@PAVANIPABASARA ~]$ vi question04.sh
[pavani@PAVANIPABASARA ~]$ chmod 777 question04.sh
[pavani@PAVANIPABASARA ~]$ ./question04.sh
Pattern i)
*
* *
* * *
* * * *
* * * * *
* * * * * *
* * * * * * *

Pattern ii)
* * * * * * *
* * * * * *
* * * * *
* * * *
* * *
* *
*

Pattern iii)
1
2 2
3 3 3
4 4 4 4
5 5 5 5 5
6 6 6 6 6 6

Pattern iv)
1
1 2
1 2 3
1 2 3 4
1 2 3 4 5
1 2 3 4 5 6

Pattern v)
    *
   * *
  * * *
 * * * *
* * * * *